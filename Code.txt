var _____WB$wombat$assign$function_____ = function(name) {
    return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name];
};
if (!self.__WB_pmw) {
    self.__WB_pmw = function(obj) {
        this.__WB_source = obj;
        return this;
    }
}
{
    let window = _____WB$wombat$assign$function_____("window");
    let self = _____WB$wombat$assign$function_____("self");
    let document = _____WB$wombat$assign$function_____("document");
    let location = _____WB$wombat$assign$function_____("location");
    let top = _____WB$wombat$assign$function_____("top");
    let parent = _____WB$wombat$assign$function_____("parent");
    let frames = _____WB$wombat$assign$function_____("frames");
    let opener = _____WB$wombat$assign$function_____("opener");

    "use strict";
    (self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[566], {
        6566: function(n, e, r) {
            r.r(e);
            var i = r(5893)
              , u = r(7294)
              , o = r(1337)
              , t = r(2999)
              , c = r(8279)
              , s = r(9992)
              , a = r(9126)
              , l = r(8356)
              , x = r(4721)
              , v = "\n\n  precision highp float;\n  ".concat(c.S, "\n\n  uniform sampler2D u_media;\n  uniform vec2 u_resolution;\n  uniform vec3 u_color;\n  uniform float i_time;\n  uniform float u_noiseSize;\n  uniform float u_seed;\n  uniform vec2 u_mediaSize;\n  uniform float u_progress;\n  uniform float u_idleSpeed;\n\n  vec2 getScreenSpace() {\n    vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy) / u_resolution.xy;\n  \n    return uv;\n  }\n\n  float circle(vec2 _uv, float _radius, vec2 _pos){\n    float dist = length(_uv * _pos) / _radius ;\n    \n    return smoothstep( .15, .25, dist);\n  }\n\n  vec4 texture(sampler2D sampler, vec2 uv) {\n    vec2 sc = gl_FragCoord.xy / u_resolution.xy;\n    vec2 ratios = vec2(u_resolution.x / u_resolution.y, u_mediaSize.x / u_mediaSize.y);\n    vec2 scale = ratios.x < ratios.y ? \n        vec2(\n            u_mediaSize.x * u_resolution.y / u_mediaSize.y, \n            u_resolution.y) : \n        vec2(\n            u_resolution.x, \n            u_mediaSize.y * u_resolution.x / u_mediaSize.x);\n    vec2 offset = (ratios.x < ratios.y ? vec2((scale.x - u_resolution.x) / 2.0, 0.0) : vec2(0.0, (scale.y - u_resolution.y) / 2.0)) / scale;\n    uv = sc * u_resolution / scale + offset;\n    return texture2D(sampler, uv);\n  }\n\n  void main() {\n    vec2 uv = getScreenSpace();\n\n    float n = (snoise((uv.xy + (u_seed) + (i_time * 3.0) * u_idleSpeed ) * u_noiseSize) + 1.0) / 2.0;\n    float c = circle(uv, 1.0 * u_progress, vec2(0.5));\n    float alpha = smoothstep(\n      n,\n      n + .01,  \n      1.-c);\n\n    gl_FragColor = vec4(u_color, 1.)*alpha;\n  }\n  \n");
            e.default = function(n) {
                n.children,
                n.imagePath;
                var e = n.container
                  , r = n.hexColor
                  , c = void 0 === r ? "#000000" : r
                  , m = n.inertia
                  , f = void 0 === m ? 0 : m
                  , d = n.idleWobbleAmount
                  , _ = void 0 === d ? 1 : d
                  , p = n.direction
                  , y = void 0 === p ? 0 : p
                  , h = n.id
                  , g = ((0,
                t.Z)().globals,
                (0,
                u.useRef)())
                  , S = (0,
                u.useRef)()
                  , w = (0,
                x.Z)().prefersReducedMotion;
                (0,
                u.useEffect)((function() {
                    if (g.current && e.current && !S.current) {
                        S.current = new o.gs({
                            fragment: v,
                            autoResize: !1,
                            dimensions: new a.Sg(600,300),
                            container: e.current,
                            onBeforeRender: function(n) {
                                this.uniforms.i_time.value += .001
                            },
                            rendererProps: {
                                canvas: g.current,
                                alpha: !0,
                                premultipliedAlpha: !0
                            }
                        }),
                        S.current.uniforms.u_progress = new o.xW({
                            value: 0
                        });
                        var n = .9 + .9 * .2 * (S.current.renderer.dpr - 1);
                        S.current.uniforms.u_noiseSize = new o.xW({
                            value: n
                        }),
                        S.current.uniforms.u_seed = new o.xW({
                            value: Math.random()
                        }),
                        S.current.uniforms.u_inertia = new o.xW({
                            value: f
                        }),
                        S.current.uniforms.u_direction = new o.xW({
                            value: y
                        }),
                        S.current.uniforms.u_color = new o.xW({
                            value: (0,
                            l.$1)(c)
                        }),
                        S.current.uniforms.u_idleSpeed = new o.xW({
                            value: _
                        }),
                        S.current.uniforms.i_time = new o.xW({
                            name: "time",
                            value: 0,
                            kind: "float"
                        })
                    }
                    return function() {
                        S.current.playing = !1,
                        S.current = null
                    }
                }
                ), [g, e, y, h, _, f]);
                var z = function(n) {
                    S.current && (S.current.uniforms.u_progress.value = n)
                };
                (0,
                u.useEffect)((function() {
                    S.current && (S.current.uniforms.u_inertia.value = f)
                }
                ), [f]),
                (0,
                u.useEffect)((function() {
                    S.current && (S.current.uniforms.u_direction.value = y)
                }
                ), [y]),
                (0,
                u.useEffect)((function() {
                    S.current && (S.current.uniforms.u_idleSpeed.value = w ? 0 : _)
                }
                ), [w, _]);
                var C = (0,
                u.useCallback)((function() {
                    w ? z(1) : (0,
                    s.Z)(0, 1, z, {
                        duration: 700,
                        timingFunction: s.U.sineOut
                    })
                }
                ), []);
                return (0,
                u.useEffect)((function() {
                    S.current && C()
                }
                ), [S, C]),
                (0,
                i.jsx)("canvas", {
                    ref: g
                })
            }
        },
        8279: function(n, e, r) {
            r.d(e, {
                S: function() {
                    return i
                }
            });
            var i = "\n  //\n  // Description : Array and textureless GLSL 2D simplex noise function.\n  //      Author : Ian McEwan, Ashima Arts.\n  //  Maintainer : ijm\n  //     Lastmod : 20110822 (ijm)\n  //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n  //               Distributed under the MIT License. See LICENSE file.\n  //               https://github.com/ashima/webgl-noise\n  //\n\n  vec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n  }\n\n  float snoise(vec2 v)\n    {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                      -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n  // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n  // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n  // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n      + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n  // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n  // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n  // Normalise gradients implicitly by scaling m\n  // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n  // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n  }\n"
        }
    }]);

}
/*
     FILE ARCHIVED ON 00:31:57 Jan 15, 2024 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 16:43:05 Sep 30, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 0.753
  exclusion.robots: 0.025
  exclusion.robots.policy: 0.011
  esindex: 0.016
  cdx.remote: 6.627
  LoadShardBlock: 198.589 (3)
  PetaboxLoader3.datanode: 55.478 (4)
  PetaboxLoader3.resolve: 176.261 (2)
  load_resource: 37.597
*/
